{"version":3,"sources":["serviceWorker.js","components/Loader.js","components/Chart.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Loader","className","Spinner","animation","variant","Chart","useState","loading","setLoading","ref","React","useRef","input","setInput","searchInput","setSearchInput","startValue","setStartValue","startInput","setStartInput","endValue","setEndValue","endInput","setEndInput","ticker","document","getElementById","start","end","timeConverter","UNIX_timestamp","s","Date","moment","utc","format","convertUnix","time","console","log","Math","floor","setData","finnhub","require","ApiClient","instance","authentications","apiKey","dataArray","finnhubClient","DefaultApi","useEffect","i","localStorage","length","key","value","getItem","push","userInput","e","Number","undefined","stockCandles","error","data","t","c","setItem","fetchStock","theme","chart","createChart","current","width","height","aSeries","addAreaSeries","topColor","bottomColor","lineColor","lineWidth","themesData","Dark","layout","backgroundColor","textColor","watermark","color","crosshair","grid","vertLines","horzLines","series","setTimeout","clear","applyOptions","remove","style","paddingTop","paddingBottom","type","id","onChange","target","placeholder","htmlFor","onClick","visible","App","Container","fluid","Navbar","hover","expand","sticky","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","Button","Component","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2be5954.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\nfunction Loader() {\r\n    return (\r\n        <div className=\"spinner-container\">\r\n            <Spinner animation=\"border\" variant=\"success\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader;","import React, { useState, useEffect } from 'react';\r\nimport { createChart } from 'lightweight-charts';\r\nimport moment from 'moment';\r\nimport Loader from './Loader';\r\n\r\nfunction Chart() {\r\n    const [loading, setLoading] = useState(false);\r\n    //above to display spinner while data is loading\r\n    const ref = React.useRef();\r\n    const [input, setInput] = useState(null);\r\n    const [searchInput, setSearchInput] = useState(\"ETH\");\r\n    const [startValue, setStartValue] = useState(null);\r\n    const [startInput, setStartInput] = useState(1551650578);\r\n    const [endValue, setEndValue] = useState(null);\r\n    const [endInput, setEndInput] = useState(1583186578);\r\n    let ticker = document.getElementById('symbol');\r\n    let start = document.getElementById('start');\r\n    let end = document.getElementById('end');\r\n\r\n    function timeConverter(UNIX_timestamp) {\r\n        let s = new Date(UNIX_timestamp * 1000)\r\n        let m = moment(s).utc().format(\"YYYY-MM-DD\");\r\n        return m;\r\n    }\r\n\r\n    //function to convert readable time into UNIX timestamp\r\n    function convertUnix(time) {\r\n        console.log(`${time} is being passed in`); //debug\r\n        let m = Math.floor(new Date(time) / 1000)\r\n        return m;\r\n    }\r\n\r\n    const [data, setData] = useState(null);\r\n    const finnhub = require('finnhub');\r\n    const api_key = finnhub.ApiClient.instance.authentications['api_key'];\r\n    api_key.apiKey = \"c82m3d2ad3ia12596ssg\"\r\n    const finnhubClient = new finnhub.DefaultApi()\r\n\r\n\r\n    let dataArray;\r\n    const fetchStock = (userInput, start, end) => {\r\n        let s;\r\n        let e;\r\n        dataArray = [{\r\n            time: Date,\r\n            value: Number\r\n        }];\r\n        if (userInput === \"\" || userInput === undefined || userInput === null) {\r\n            userInput = \"ETH\"\r\n        }\r\n        s = startValue ? convertUnix(start) : 1551650578\r\n        e = endValue ? convertUnix(end) : 1583186578\r\n        finnhubClient.stockCandles(userInput, \"D\", s, e,\r\n            (error, data) => {\r\n                if (error) {\r\n                    console.error(error);\r\n                } else {\r\n                    for (let i = 0; i < data?.t?.length; i++) {\r\n                        dataArray[i] = {\r\n                            time: timeConverter(data.t[i]),\r\n                            value: data.c[i]\r\n                        }\r\n                    }\r\n                    for (let i = 0; i < dataArray.length; i++) {\r\n                        localStorage.setItem(dataArray[i].time, dataArray[i].value);\r\n                    }\r\n                    return dataArray;\r\n                }\r\n            });\r\n    }\r\n\r\n    const handleSearchChange = (e) => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleStartChange = (e) => {\r\n        setStartValue(e.target.value);\r\n    }\r\n\r\n    const handleEndChange = (e) => {\r\n        setEndValue(e.target.value);\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setSearchInput(ticker.value);\r\n        setStartInput(start.value);\r\n        setEndInput(end.value);\r\n        setLoading(true);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        let dataArray = [];\r\n        for (let i = 0; i < localStorage.length; i++) {\r\n            let key = localStorage.key(i);\r\n            let value = localStorage.getItem(key);\r\n            dataArray.push({\r\n                time: key,\r\n                value: value\r\n            })\r\n        }\r\n        setData(dataArray);\r\n    }, [setSearchInput]);\r\n\r\n\r\n    const iStyle = {\r\n        paddingTop: '10px',\r\n        paddingBottom: '10px',\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchStock(searchInput, startInput, endInput);\r\n\r\n        const chart = createChart(ref.current, { width: 900, height: 500 });\r\n        const aSeries = chart.addAreaSeries({\r\n            topColor: 'rgba(33, 150, 243, 0.56)',\r\n            bottomColor: 'rgba(33, 150, 243, 0.04)',\r\n            lineColor: 'rgba(33, 150, 243, 1)',\r\n            lineWidth: 2,\r\n        });\r\n        var darkTheme = {\r\n            chart: {\r\n                layout: {\r\n                    backgroundColor: '#2B2B43',\r\n                    lineColor: '#2B2B43',\r\n                    textColor: '#D9D9D9',\r\n                },\r\n                watermark: {\r\n                    color: 'rgba(0, 0, 0, 0)',\r\n                },\r\n                crosshair: {\r\n                    color: '#758696',\r\n                },\r\n                grid: {\r\n                    vertLines: {\r\n                        color: '#2B2B43',\r\n                    },\r\n                    horzLines: {\r\n                        color: '#363C4E',\r\n                    },\r\n                },\r\n            },\r\n            series: {\r\n                topColor: 'rgba(32, 226, 47, 0.56)',\r\n                bottomColor: 'rgba(32, 226, 47, 0.04)',\r\n                lineColor: 'rgba(32, 226, 47, 1)',\r\n            },\r\n        };\r\n\r\n        var themesData = {\r\n            Dark: darkTheme\r\n        };\r\n\r\n        function syncToTheme(theme) {\r\n            chart.applyOptions(themesData[theme].chart);\r\n            aSeries.applyOptions(themesData[theme].series);\r\n        }\r\n\r\n        // JOHN! If you are reading this.. please note, I realize what I have done below is a \"quick and dirty\" way to accomplish waiting for the components data to mount. In production, I would NEVER do this. I would instead use a React hook to wait for the data to load or another more efficient approach. Please also note that I learn FAST and if hired, I will really dive deep into the tradeview library and become a subject matter expert on it and will then be able to implement it with custom functionality and more complex implementations. In sum, Please take a chance on me! What I lack in \"professional\" experience, I make up for with my passion, determination, and self-motivation! I am also quite moldable at this point (no 'set in stone' ways) which would benefit you as my boss.\r\n        setTimeout(() => {  // using setTimeout to make sure the data is set before the chart is rendered\r\n            setLoading(false);\r\n            aSeries.setData(dataArray);\r\n        }, 850);\r\n        localStorage.clear();\r\n        syncToTheme('Dark');\r\n        return () => {\r\n            chart.remove()\r\n        }\r\n\r\n    }, [searchInput, dataArray, startInput, endInput, loading]);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <h3>\r\n                    Enter the ticker symbol of the stock you want to see.\r\n                </h3>\r\n                <div style={iStyle}>\r\n                    <h6>Stock Ticker</h6>\r\n                    <input type=\"text\" id=\"symbol\" onChange={handleSearchChange} value={input} placeholder=\"ex: ETH\" />\r\n                    {'            '}\r\n                    <label htmlFor=\"start\">Starting Date: </label>\r\n                    <input type=\"date\" id=\"start\" htmlFor=\"start\" value={startValue} onChange={handleStartChange} />\r\n                    {'            '}\r\n                    <label htmlFor=\"end\">Ending Date: </label>\r\n                    <input type=\"date\" id=\"end\" htmlFor=\"end\" value={endValue} onChange={handleEndChange} />\r\n                    {'            '}\r\n                    <button className=\"btn-success\" onClick={handleClick}>Submit</button>\r\n                </div>\r\n                {loading && <Loader visible />}\r\n            </div>\r\n            <div ref={ref} />\r\n            <div>\r\n                <h3>Viewing Info for: {searchInput ? searchInput : \"ETH\"}</h3>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport '../App.css';\r\nimport { Navbar, Nav, Container, Button } from 'react-bootstrap';\r\nimport Chart from './Chart';\r\n\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n                <Container fluid>\r\n                    <Navbar hover=\"true\" style={{ backgroundColor: \"#3d4147\" }} expand=\"lg\" variant=\"dark\" sticky=\"top\">\r\n                        <Navbar.Brand style={{ color: \"#20c94d\" }} href=\"/stock_view\">Covey</Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                            <Nav className=\"ml-auto\">\r\n                                <Nav.Link href=\"#\">Home</Nav.Link>\r\n                                <Nav.Link href=\"#\">Leaderboard</Nav.Link>\r\n                                <Nav.Link href=\"#\">Communities</Nav.Link>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                        <Button className=\"join-btn\">Create Portfolio</Button>\r\n                    </Navbar>\r\n                    <br />\r\n                    <Chart />\r\n                </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport App from './components/App'\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n\nserviceWorker.unregister()"],"sourceRoot":""}