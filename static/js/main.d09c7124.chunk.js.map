{"version":3,"sources":["serviceWorker.js","components/Chart.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Chart","timeConverter","UNIX_timestamp","s","Date","moment","utc","format","useState","setData","finnhub","require","ApiClient","instance","authentications","apiKey","dataArray","finnhubClient","DefaultApi","ref","React","useRef","input","setInput","searchInput","setSearchInput","ticker","document","getElementById","useEffect","i","localStorage","length","key","value","getItem","push","time","userInput","Number","undefined","stockCandles","error","data","t","c","setItem","console","log","theme","chart","createChart","current","width","height","aSeries","addAreaSeries","topColor","bottomColor","lineColor","lineWidth","themesData","Dark","layout","backgroundColor","textColor","watermark","color","crosshair","grid","vertLines","horzLines","series","setTimeout","clear","applyOptions","remove","style","paddingTop","paddingBottom","type","id","onChange","e","target","placeholder","onClick","App","Container","fluid","Navbar","hover","expand","variant","sticky","Brand","href","Toggle","aria-controls","Collapse","Nav","className","Link","Button","Component","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d09c7124.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState, useEffect } from 'react';\r\nimport { createChart } from 'lightweight-charts';\r\n// import { fetchStock } from './Search';\r\nimport moment from 'moment';\r\n\r\nfunction Chart() {\r\n    // const [loading, setLoading] = useState(true);\r\n    //todo: use above to display spinner while data is loading\r\n\r\n    function timeConverter(UNIX_timestamp) {\r\n        let s = new Date(UNIX_timestamp * 1000)\r\n        let m = moment(s).utc().format(\"YYYY-MM-DD\");\r\n        return m;\r\n    }\r\n    const [data, setData] = useState(null);\r\n    const finnhub = require('finnhub');\r\n    const api_key = finnhub.ApiClient.instance.authentications['api_key'];\r\n    api_key.apiKey = \"c82m3d2ad3ia12596ssg\"\r\n    const finnhubClient = new finnhub.DefaultApi()\r\n\r\n\r\n    let dataArray;\r\n    const fetchStock = (userInput) => {\r\n        dataArray = [{\r\n            time: \"\",\r\n            value: Number\r\n        }];\r\n        if (userInput === \"\" || userInput === undefined || userInput === null) {\r\n            userInput = \"ETH\"\r\n        }\r\n        finnhubClient.stockCandles(userInput, \"D\", 1551650578, 1583186578,\r\n            (error, data) => {\r\n                if (error) {\r\n                    console.error(error);\r\n                } else {\r\n                    for (let i = 0; i < data.t.length; i++) {\r\n                        dataArray[i] = {\r\n                            time: timeConverter(data.t[i]),\r\n                            value: data.c[i]\r\n                        }\r\n                    }\r\n                    for (let i = 0; i < dataArray.length; i++) {\r\n                        localStorage.setItem(dataArray[i].time, dataArray[i].value);\r\n                    }\r\n                    return dataArray;\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n    const ref = React.useRef();\r\n    const [input, setInput] = useState(null);\r\n    const [searchInput, setSearchInput] = useState('');\r\n    let ticker = document.getElementById('symbol');\r\n    const handleSearchChange = (e) => {\r\n        setInput(e.target.value);\r\n    };\r\n    const handleClick = () => {\r\n        setSearchInput(ticker.value);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        let dataArray = [];\r\n        for (let i = 0; i < localStorage.length; i++) {\r\n            let key = localStorage.key(i);\r\n            let value = localStorage.getItem(key);\r\n            dataArray.push({\r\n                time: key,\r\n                value: value\r\n            })\r\n        }\r\n        setData(dataArray);\r\n    }, [setSearchInput]);\r\n\r\n\r\n    const iStyle = {\r\n        //adding padding to input-div for readability\r\n        paddingTop: '10px',\r\n        paddingBottom: '10px',\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchStock(searchInput);\r\n        console.log(dataArray) // debug\r\n        const chart = createChart(ref.current, { width: 900, height: 500 });\r\n        const aSeries = chart.addAreaSeries({\r\n            topColor: 'rgba(33, 150, 243, 0.56)',\r\n            bottomColor: 'rgba(33, 150, 243, 0.04)',\r\n            lineColor: 'rgba(33, 150, 243, 1)',\r\n            lineWidth: 2,\r\n        });\r\n        var darkTheme = {\r\n            chart: {\r\n                layout: {\r\n                    backgroundColor: '#2B2B43',\r\n                    lineColor: '#2B2B43',\r\n                    textColor: '#D9D9D9',\r\n                },\r\n                watermark: {\r\n                    color: 'rgba(0, 0, 0, 0)',\r\n                },\r\n                crosshair: {\r\n                    color: '#758696',\r\n                },\r\n                grid: {\r\n                    vertLines: {\r\n                        color: '#2B2B43',\r\n                    },\r\n                    horzLines: {\r\n                        color: '#363C4E',\r\n                    },\r\n                },\r\n            },\r\n            series: {\r\n                topColor: 'rgba(32, 226, 47, 0.56)',\r\n                bottomColor: 'rgba(32, 226, 47, 0.04)',\r\n                lineColor: 'rgba(32, 226, 47, 1)',\r\n            },\r\n        };\r\n\r\n        var themesData = {\r\n            Dark: darkTheme\r\n        };\r\n\r\n        function syncToTheme(theme) {\r\n            chart.applyOptions(themesData[theme].chart);\r\n            aSeries.applyOptions(themesData[theme].series);\r\n        }\r\n\r\n        setTimeout(() => {  // using setTimeout to make sure the data is set before the chart is rendered\r\n            aSeries.setData(dataArray);\r\n        }, 1000);\r\n        localStorage.clear();\r\n        syncToTheme('Dark');\r\n        return () => {\r\n            chart.remove()\r\n        }\r\n\r\n    }, [searchInput, dataArray]);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <h3>\r\n                    Enter the ticker symbol of the stock you want to see.\r\n                </h3>\r\n                <div style={iStyle}>\r\n                    <h6>Stock Ticker</h6>\r\n                    <input type=\"text\" id=\"symbol\" onChange={handleSearchChange} value={input} placeholder=\"ex: ETH\" />\r\n                    <button onClick={handleClick}>Submit</button>\r\n                </div>\r\n            </div>\r\n            <div ref={ref} />\r\n            <div>\r\n                <h3>Viewing Info for: {searchInput ? searchInput : \"ETH\"}</h3>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport '../App.css';\r\nimport { Navbar, Nav, Container, Button } from 'react-bootstrap';\r\n// import StockContainer from '../containers/StockContainer';\r\nimport Chart from './Chart';\r\n// import { LineChart } from 'recharts';\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n                <Container fluid>\r\n                    <Navbar hover=\"true\" style={{ backgroundColor: \"#3d4147\" }} expand=\"lg\" variant=\"dark\" sticky=\"top\">\r\n                        <Navbar.Brand style={{ color: \"#20c94d\" }} href=\"/stock_view\">Covey</Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                            <Nav className=\"ml-auto\">\r\n                                <Nav.Link href=\"#\">Home</Nav.Link>\r\n                                <Nav.Link href=\"#\">Leaderboard</Nav.Link>\r\n                                <Nav.Link href=\"#\">Communities</Nav.Link>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                        <Button className=\"join-btn\">Create Portfolio</Button>\r\n                    </Navbar>\r\n                    <br />\r\n                    <Chart />\r\n                </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport App from './components/App'\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n\nserviceWorker.unregister()"],"sourceRoot":""}